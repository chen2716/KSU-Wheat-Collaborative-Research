---
title: "Get Weather"
author: "Nicolas Giordano"
format: html
editor: visual
---

# Get Weather Summaries from API

This functions will allow you to:

-   Get weather summaries from different API

-   Summarize your weather data for different periods during the cropping season

-   Use Penmann - Montheith ecuation for estimation ET0 with the least data from MESONET

-   Plot your weather data

## Load Packages

```{r}
library(tidyverse) # Data Wrangling and iteration
library(nasapower) # NASAPOWER API
library(daymetr) # DAYMET API
library(lubridate) # For operation with dates
library(zoo) # For interpolation of missing values

## Load Custom functions
source("weather/codes/weather_functions.R")
```

## Create some example data

```{r}
df = 
data.frame(
  LOCATION = c("AB","AB","HUT","HUT"), 
  LOCATION_MESONET = c("Ashland%20Bottoms","Ashland%20Bottoms", "Hutchinson%2010SW","Hutchinson%2010SW"),
  ANTHESIS = c("05/12/2021","05/12/2021", "05/08/2021", "05/08/2021"), 
  SOWING = c("10/12/2020", "10/12/2020", "10/08/2020", "10/08/2020"), 
  HARVEST = c("07/10/2021","07/10/2021","06/25/2021", "06/25/2021"),
  GENOTYPE = c("Zenda","Larry", "Zenda", "Larry"), 
  MATURITY = c(10,-10, 10,-10), 
  LAT = c(37.00, 37.20), 
  ALT = c(300, 350)
)
df
```

Mesonet has a complex syntax on the URL to access. Getting weather data is subject to human error if we write this link manually.

Here is an example:

'https://mesonet.k-state.edu/rest/stationdata/?stn=Ashland%20Bottoms&int=day&t_start=20201013000000&t_end=20210621000000&vars=TEMP2MMIN,TEMP2MMAX,PRECIP,VPDEFAVG,SR,WSPD2MAVG,PRESSUREAVG'

## KS MESONET

```{r}
URL_ = "https://mesonet.k-state.edu/rest/stationdata/"
INTERVAL = "&int=day"
VARIABLES = "&vars=TEMP2MMIN,TEMP2MMAX,PRECIP,VPDEFAVG,SR,WSPD2MAVG,PRESSUREAVG"

# Run GET MESONET
df_mesonet = get_mesonet(df)

```

## Interpolation of missing values and  ET0 estimation

For estimation of ET0 we use a custom function eto.penmon()

**Formula is based on:**

Step by Step Calculation of the Penman-Monteith
Evapotranspiration (FAO-56 Method)1
Lincoln Zotarelli, Michael D. Dukes, Consuelo C. Romero, Kati W. Migliaccio, and Kelly T.
Morgan

```{r}
df_interpol = 
df %>% 
  group_by(LOCATION, LAT, ALT, GENOTYPE, MATURITY) %>% 
  transmute_at(vars(ANTHESIS:HARVEST), ~as.Date(., format = '%m/%d/%Y')) %>% 
  ungroup() %>% 
  full_join(df_mesonet) %>% 
  unnest(mesonet) %>% 
  #separate(TIMESTAMP, into = c("YEAR", "MONTH", "DAY"), sep = "-", remove = FALSE) %>% 
  mutate(# Format Date-Time
         TIMESTAMP = as.Date(TIMESTAMP, format='%Y-%m-%d'),
         #Interpolation of missing values
         TEMP2MMIN = na.approx(TEMP2MMIN), 
         TEMP2MMAX = na.approx(TEMP2MMAX), 
         DOY = lubridate::yday(x = TIMESTAMP ), 
         
         PENMON_eto = eto.penmon(tmax = TEMP2MMAX, 
                          tmin = TEMP2MMIN,
                          wind_speed =  WSPD2MAVG, 
                          solar_radiation = SR,
                          atm_pr = PRESSUREAVG, 
                          doy = DOY,
                          lat = LAT,
                          sealvl = ALT,
                          vpd = VPDEFAVG)
  )
```

```{r}
tminCP = 4.5
tminGF = 0

minGDU_CP = 300
maxGCU_CP = 100

minGDU_GF = 100
maxGCU_GF = 600

test = 
df_interpol %>% 
    mutate(Tmean = (TEMP2MMIN + TEMP2MMAX)/2, 
         #Critical period growing degree units
         gmin = case_when(TEMP2MMIN >= tminCP ~ TEMP2MMIN, 
                            TRUE ~ tminCP),
         # Tmax threshold Growing Degrees.
         gmax = case_when(#TEMP2MMAX <= 27 & 
                          TEMP2MMAX >= tminCP ~ TEMP2MMAX,
                          TEMP2MMAX <= tminCP ~ tminCP,
                          TRUE ~ 99999),
         # Daily Growing Degree Units.
         gdu_ant = case_when( ((gmin + gmax)/2) - tminCP <= tminCP ~ tminCP,
                            TRUE ~ ((gmin + gmax)/2) - tminCP),
         #Grain Filling period growing degree units
         gmin_gf = case_when(TEMP2MMIN >= tminGF ~ TEMP2MMIN, 
                            TRUE ~ tminGF), 
         gmax_gf = case_when(#TEMP2MMAX <= 27 &
                             TEMP2MMAX >= tminGF ~ TEMP2MMAX,
                             TEMP2MMAX <= tminGF ~ tminGF,
                             TRUE ~ 999999),
         gdu_gf = case_when( ((gmin_gf + gmax_gf)/2) - tminGF <= tminGF ~ tminGF,
                            TRUE ~ ((gmin_gf + gmax_gf)/2) - tminGF) )

VARS_SUM = c("PP", "Tmean", "Duration", "PQ", "VPD", "cumET0")

test %>% 
  group_by(LOCATION, GENOTYPE) %>% 
  mutate(ANTHESIS = ANTHESIS + MATURITY) %>% 
  nest(.key = "weather") %>% 
  mutate(weather = weather %>% map(~.x %>% mutate(condition = case_when(TIMESTAMP >= ANTHESIS ~ 1,T ~ 0)) %>%
                               # FROSTS EVENTS CP - T = 0C
                               group_by(condition) %>% 
                               mutate(accum_gdu = ifelse(condition == 0,  rev(cumsum(rev(gdu_ant))), cumsum(gdu_ant)),
                                      PERIOD = case_when(condition == 0 & accum_gdu <= minGDU_CP | condition == 1 & accum_gdu <= maxGCU_CP ~ "CP",
                                                         condition == 1 & accum_gdu >= minGDU_GF & accum_gdu <= maxGCU_GF ~ "GF", T~ NA_character_) ) %>% 
                               drop_na(PERIOD) %>% 
                               group_by(ANTHESIS, PERIOD) %>%
                               mutate(ndays = n(), 
                                      ET = PENMON_eto)
                                %>% 
                               summarise_at(vars(TEMP2MMIN, TEMP2MMAX, VPDEFAVG, ET, Tmean, PRECIP, ndays, SR, gdu_ant, gdu_gf),
                                            list(mean = ~mean(., na.rm=T), 
                                                 sum = ~sum(.) ))  %>% 
                               mutate(PQ = SR_sum/ case_when(PERIOD == "CP"~ gdu_ant_sum,
                                                             PERIOD == "GF"~ gdu_gf_sum), 
                                      cumET0 = ET_sum, 
                                      VPD = VPDEFAVG_mean,
                                      Duration = ndays_mean, 
                                      Tmean = Tmean_mean,
                                      PP = PRECIP_sum) %>% 
                               dplyr::select(PERIOD, ANTHESIS, all_of(VARS_SUM)) %>%
                               pivot_wider(names_from = PERIOD, values_from = c(PP:ncol(.)))  )) %>% 
  unnest(cols = weather)
```


